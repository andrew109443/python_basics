'''
1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц вы найдете в методичке.
Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем
с первым элементом первой строки второй матрицы и т.д.
'''

class Matrix:

    def __init__(self, input_data):
        self.input = input_data

    def __add__(self, other):
        a = ''
        if len(self.input) == len(other.input):
            for line_1, line_2 in zip(self.input, other.input):
                summed_line = [x + y for x, y in zip(line_1, line_2)]
                a += ' '.join([str(i) for i in summed_line]) + '\n'
        return a

    def __str__(self):
        return '\n'.join([' '.join([str(i) for i in line]) for line in self.input])


m_1 = Matrix([[1, 1], [1, 1], [1, 1], [1, 1]])
m_2 = Matrix([[2, 2], [2, 2], [2, 2], [2, 2]])

print(m_1 + m_2)

'''
2. Реализовать проект расчета суммарного расхода ткани на производство одежды. 
Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название. 
К типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды существуют параметры: 
размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.
Для определения расхода ткани по каждому типу одежды использовать формулы: 
для пальто (V/6.5 + 0.5), 
для костюма (2 * H + 0.3). 
Проверить работу этих методов на реальных данных.
Реализовать общий подсчет расхода ткани. 
Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта, 
проверить на практике работу декоратора @property.
'''

from abc import ABC, abstractmethod

class Cloth(ABC):

    def __init__(self, var):
        self.var = var

    @abstractmethod
    def calc(self):
        pass

class Coat(Cloth):

    @property
    def calc(self):
        return ((self.var / 6.5) + 0.5)

class Suit(Cloth):

    @property
    def calc(self):
        return ((2 * self.var) + 0.3)

coat = Coat(15)
suit = Suit(25)
print(coat.calc)
print(suit.calc)
